// MARK: - AutoCodable

import Foundation

{% for model in types.based.AutoCodable|struct %}
extension {{model.name}}: Codable {
    public enum CodingKeys: String, CodingKey {
{% for variable in model.storedVariables %}
{% if variable.annotations.skipCodable == nil %}
        case {{variable.name}} {% if variable.annotations.key %}= "{{variable.annotations.key}}" {% endif %}
{% endif %}
{% endfor %}
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
{% for variable in model.storedVariables %}
        try container.encode({{variable.name}}, forKey: .{{variable.name}})
{% endfor %}
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.init(
{% for variable in model.storedVariables %}
{% if variable.isOptional %}
            {{variable.name}}: try values.decodeIfPresent({{variable.typeName | replace:"?",""}}.self, forKey: .{{variable.name}}){% if not forloop.last %},{% endif %}
{% else %}
{% if variable.annotations.default %}
            {{variable.name}}: try values.decodeIfPresent({{variable.typeName}}.self, forKey: .{{variable.name}}) ?? {{variable.annotations.default}}{% if not forloop.last %},{% endif %}
{% else %}
            {{variable.name}}: try values.decode({{variable.typeName}}.self, forKey: .{{variable.name}}){% if not forloop.last %},{% endif %}
{% endif %}
{% endif %}
{% endfor %}
        )
    }
}
{% endfor %}
