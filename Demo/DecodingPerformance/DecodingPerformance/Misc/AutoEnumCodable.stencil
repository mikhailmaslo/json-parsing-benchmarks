// MARK: - AutoEnumCodable

import Foundation

{% for enum in types.based.AutoCodable|enum %}
extension {{enum.name}}: Codable {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        var key: String {
            switch self {
            {% for variable in enum.cases %}
            case .{{ variable.name }}:
                return "{{ variable.name }}"
            {% endfor %}
            }
        }

        try container.encode(key)
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(String.self)
        switch rawValue {
{% for variable in enum.cases %}
        case "{{ variable.name }}":
            self = .{{ variable.name }}
{% endfor %}
        default:
            preconditionFailure()
        }
    }
}
{% endfor %}
